# Helm Chart Publishing Workflow
# This workflow publishes the Helm chart to OCI registry
# Docker images are handled by the main ci.yml workflow

name: Publish Helm Chart

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    # DÃ©clencher pour toutes les branches qui ont des builds (PR + main/master)
  workflow_dispatch:  # Permettre dÃ©clenchement manuel

env:
  REGISTRY: ghcr.io

jobs:
  publish-helm-chart:
    runs-on: ubuntu-latest
    # Only run if CI workflow succeeded OR manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Helm Chart Publishing
    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.14.0'

    - name: Determine chart version
      id: chart-version
      run: |
        cd charts/klask
        BASE_VERSION=$(grep '^version:' Chart.yaml | awk '{print $2}')
        
        if [[ "${{ github.event_name }}" == "workflow_run" && "${{ github.event.workflow_run.head_branch }}" == "main" ]] || [[ "${{ github.event_name }}" == "workflow_run" && "${{ github.event.workflow_run.head_branch }}" == "master" ]]; then
          # Pour main/master: version stable
          CHART_VERSION="$BASE_VERSION"
        elif [[ "${{ github.ref_type }}" == "tag" ]]; then
          # Pour les tags: utiliser la version du tag
          TAG_VERSION="${{ github.ref_name }}"
          CHART_VERSION="${TAG_VERSION#v}"  # Enlever le 'v' si prÃ©sent
        else
          # Pour les PRs: version avec suffixe
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            PR_NUMBER=$(echo "${{ github.event.workflow_run.head_branch }}" | grep -o 'pr-[0-9]*' | cut -d'-' -f2 || echo "dev")
            CHART_VERSION="$BASE_VERSION-pr$PR_NUMBER"
          else
            CHART_VERSION="$BASE_VERSION-dev"
          fi
        fi
        
        echo "version=$CHART_VERSION" >> $GITHUB_OUTPUT
        echo "ðŸ“¦ Chart version will be: $CHART_VERSION"

    - name: Update chart version
      run: |
        cd charts/klask
        # Mettre Ã  jour la version dans Chart.yaml
        sed -i "s/^version:.*/version: ${{ steps.chart-version.outputs.version }}/" Chart.yaml
        echo "âœ… Updated Chart.yaml version to ${{ steps.chart-version.outputs.version }}"

    - name: Package Helm chart
      run: |
        cd charts
        helm package klask
        echo "ðŸ“¦ Packaged chart: klask-${{ steps.chart-version.outputs.version }}.tgz"

    - name: Push Helm chart to OCI registry
      run: |
        cd charts
        
        # Login to GHCR for Helm
        echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin
        
        # Push the chart
        helm push klask-${{ steps.chart-version.outputs.version }}.tgz oci://${{ env.REGISTRY }}/${{ github.repository_owner }}
        
        echo "ðŸš€ Pushed chart: oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/klask:${{ steps.chart-version.outputs.version }}"

